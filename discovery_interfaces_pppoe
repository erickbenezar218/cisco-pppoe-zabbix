#!/usr/bin/env python3

# Com base no Script de Fernando Almondes
## Créditos: O script original foi desenvolvido por Fernando Almondes. As modificações e correções para melhorar a compatibilidade com MIBs e integração com o Zabbix foram realizadas por Erick Benezar.
# Data: 19/09/2024

import subprocess
import re
import json
import sys

def run_snmpwalk(command):
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()
        return output
    except subprocess.CalledProcessError as e:
        print(f"Erro ao executar comando: {e.output.decode()}", file=sys.stderr)
        return ""

# Verifica os argumentos de linha de comando
if len(sys.argv) < 3:
    print("Uso: python discovery_interfaces.py <IP> <community>")
    sys.exit(1)

ip = sys.argv[1]
community = sys.argv[2]

# Executa os comandos SNMP
cmd_lista1 = f"snmpwalk -Cc -v2c -c {community} {ip} iso.3.6.1.2.1.2.2.1.2 | head -200"
cmd_lista2 = f"snmpwalk -Cc -v2c -c {community} {ip} iso.3.6.1.2.1.2.2.1.3 | head -200"
cmd_lista3 = f"snmpwalk -Cc -v2c -c {community} {ip} iso.3.6.1.2.1.31.1.1.1.18 | head -200"

output_lista1 = run_snmpwalk(cmd_lista1)
output_lista2 = run_snmpwalk(cmd_lista2)
output_lista3 = run_snmpwalk(cmd_lista3)

# Processa a Lista 1
matches1 = re.findall(r'iso\.3\.6\.1\.2\.1\.2\.2\.1\.2\.(\d+)\s=\sSTRING:\s"([^"]+)"', output_lista1)
lista1 = [{"{#SNMPINDEX}": index, "{#IFDESCR}": name} for index, name in matches1[:200]]

# Processa a Lista 2
matches2 = re.findall(r'iso\.3\.6\.1\.2\.1\.2\.2\.1\.3\.(\d+)\s=\sINTEGER:\s(\d+)', output_lista2)
lista2 = [{"{#SNMPINDEX}": index, "{#IFTYPE}": type} for index, type in matches2[:200]]

# Processa a Lista 3
matches3 = re.findall(r'iso\.3\.6\.1\.2\.1\.31\.1\.1\.1\.18\.([0-9]+)\s=\s(?:STRING:\s"([^"]+)"|(\s*))', output_lista3)
lista3 = [{"{#SNMPINDEX}": index, "{#IFALIAS}": name if name else ""} for index, name, empty in matches3[:200]]

# Combina as listas em um único JSON
output = []
for item1, item2, item3 in zip(lista1, lista2, lista3):
    output.append({**item1, **item2, **item3})

# Converte o JSON em uma string formatada
json_output = json.dumps({"data": output}, indent=4)

# Imprime o resultado
print(json_output)
